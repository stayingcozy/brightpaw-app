rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    allow read: if request.auth.uid == request.resource.auth.uid;

		match /users/{userId} {
			allow read: if belongsTo(userId);
      allow update: if belongsTo(userId) && isValidUserData();
			allow create: if belongsTo(userId) && hasValidTimestamp() && isValidUserData();
		}

    match /users/{userId}/calls/{docs = ** } {
      allow read, update: if belongsTo(userId);
			allow create: if belongsTo(userId) && hasValidTimestamp();
    }

    match /users/{userId}/posts/{docs = ** } {
      allow read: if belongsTo(userId);
			allow create: if belongsTo(userId) && isValidPost();
      allow update: if belongsTo(userId) && isValidUpdatedPost();
    }

		function belongsTo(userId) {
			return request.auth.uid == userId;
		}
		function hasValidTimestamp() {
			return request.time == request.resource.data.createdAt;
		}

    function isValidUserData() {
      let post = request.resource.data;
      let hasRequiredFields = post.keys().hasAll(['displayName', 'photoURL', 'username']);

      return hasRequiredFields;
    }

    function isValidPost() {
      let post = request.resource.data;
      let isOwner = post.uid == request.auth.uid;
      let isNow = request.time == request.resource.data.createdAt;
      let hasRequiredFields = post.keys().hasAll(['content', 'createdAt', 'uid', 'updatedAt','username']);

      return isOwner && hasRequiredFields && isNow;
    }

    function isValidUpdatedPost() {
      let post = request.resource.data;
      let hasRequiredFields = post.keys().hasAny(['content', 'createdAt', 'uid', 'updatedAt','username']);
      // let noMetaFields = post.keys().hasOnly(['content', 'updatedAt']);
      let isValidContent = post.content is string && post.content.size() < 10000;

      return hasRequiredFields && isValidContent; // && noMetaFields;
    }

	}
}